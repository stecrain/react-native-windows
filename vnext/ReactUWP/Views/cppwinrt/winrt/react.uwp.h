// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Automation.Provider.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.Automation.Peers.2.h"
#include "winrt/impl/react.uwp.2.h"

namespace winrt::impl {

template <typename D> react::uwp::DynamicAutomationPeer consume_react_uwp_IDynamicAutomationPeerFactory<D>::CreateInstance(Windows::UI::Xaml::FrameworkElement const& owner) const
{
    react::uwp::DynamicAutomationPeer value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPeerFactory)->CreateInstance(get_abi(owner), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::AccessibilityRoleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->get_AccessibilityRoleProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::SetAccessibilityRole(Windows::UI::Xaml::UIElement const& element, react::uwp::AccessibilityRoles const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->SetAccessibilityRole(get_abi(element), get_abi(value)));
}

template <typename D> react::uwp::AccessibilityRoles consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::GetAccessibilityRole(Windows::UI::Xaml::UIElement const& element) const
{
    react::uwp::AccessibilityRoles result{};
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->GetAccessibilityRole(get_abi(element), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::AccessibilityStateDisabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->get_AccessibilityStateDisabledProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::SetAccessibilityStateDisabled(Windows::UI::Xaml::UIElement const& element, bool value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->SetAccessibilityStateDisabled(get_abi(element), value));
}

template <typename D> bool consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::GetAccessibilityStateDisabled(Windows::UI::Xaml::UIElement const& element) const
{
    bool result{};
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->GetAccessibilityStateDisabled(get_abi(element), &result));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::AccessibilityStateSelectedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->get_AccessibilityStateSelectedProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::SetAccessibilityStateSelected(Windows::UI::Xaml::UIElement const& element, bool value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->SetAccessibilityStateSelected(get_abi(element), value));
}

template <typename D> bool consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::GetAccessibilityStateSelected(Windows::UI::Xaml::UIElement const& element) const
{
    bool result{};
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->GetAccessibilityStateSelected(get_abi(element), &result));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::AccessibilityInvokeEventHandlerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->get_AccessibilityInvokeEventHandlerProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::SetAccessibilityInvokeEventHandler(Windows::UI::Xaml::UIElement const& element, react::uwp::AccessibilityInvokeEventHandler const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->SetAccessibilityInvokeEventHandler(get_abi(element), get_abi(value)));
}

template <typename D> react::uwp::AccessibilityInvokeEventHandler consume_react_uwp_IDynamicAutomationPropertiesStatics<D>::GetAccessibilityInvokeEventHandler(Windows::UI::Xaml::UIElement const& element) const
{
    react::uwp::AccessibilityInvokeEventHandler result{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IDynamicAutomationPropertiesStatics)->GetAccessibilityInvokeEventHandler(get_abi(element), put_abi(result)));
    return result;
}

template <typename D> react::uwp::ViewPanel consume_react_uwp_IViewControl<D>::GetPanel() const
{
    react::uwp::ViewPanel result{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewControl)->GetPanel(put_abi(result)));
    return result;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::InsertAt(uint32_t index, Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->InsertAt(index, get_abi(value)));
}

template <typename D> void consume_react_uwp_IViewPanel<D>::RemoveAt(uint32_t index) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->RemoveAt(index));
}

template <typename D> void consume_react_uwp_IViewPanel<D>::Clear() const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->Clear());
}

template <typename D> void consume_react_uwp_IViewPanel<D>::FinalizeProperties() const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->FinalizeProperties());
}

template <typename D> Windows::UI::Xaml::Controls::Border consume_react_uwp_IViewPanel<D>::GetOuterBorder() const
{
    Windows::UI::Xaml::Controls::Border result{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->GetOuterBorder(put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_react_uwp_IViewPanel<D>::ViewBackground() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->get_ViewBackground(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::ViewBackground(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->put_ViewBackground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness consume_react_uwp_IViewPanel<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::BorderThickness(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_react_uwp_IViewPanel<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius consume_react_uwp_IViewPanel<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value{};
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->put_CornerRadius(get_abi(value)));
}

template <typename D> bool consume_react_uwp_IViewPanel<D>::ClipChildren() const
{
    bool value{};
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->get_ClipChildren(&value));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanel<D>::ClipChildren(bool value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanel)->put_ClipChildren(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::ViewBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_ViewBackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::ClipChildrenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_ClipChildrenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::TopProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_TopProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanelStatics<D>::SetTop(Windows::UI::Xaml::UIElement const& element, double value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->SetTop(get_abi(element), value));
}

template <typename D> double consume_react_uwp_IViewPanelStatics<D>::GetTop(Windows::UI::Xaml::UIElement const& element) const
{
    double result{};
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->GetTop(get_abi(element), &result));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_react_uwp_IViewPanelStatics<D>::LeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->get_LeftProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_react_uwp_IViewPanelStatics<D>::SetLeft(Windows::UI::Xaml::UIElement const& element, double value) const
{
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->SetLeft(get_abi(element), value));
}

template <typename D> double consume_react_uwp_IViewPanelStatics<D>::GetLeft(Windows::UI::Xaml::UIElement const& element) const
{
    double result{};
    check_hresult(WINRT_SHIM(react::uwp::IViewPanelStatics)->GetLeft(get_abi(element), &result));
    return result;
}

template <> struct delegate<react::uwp::AccessibilityInvokeEventHandler>
{
    template <typename H>
    struct type : implements_delegate<react::uwp::AccessibilityInvokeEventHandler, H>
    {
        type(H&& handler) : implements_delegate<react::uwp::AccessibilityInvokeEventHandler, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke() noexcept final
        {
            try
            {
                (*this)();
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <typename D>
struct produce<D, react::uwp::IDynamicAutomationPeer> : produce_base<D, react::uwp::IDynamicAutomationPeer>
{};

template <typename D>
struct produce<D, react::uwp::IDynamicAutomationPeerFactory> : produce_base<D, react::uwp::IDynamicAutomationPeerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* owner, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(react::uwp::DynamicAutomationPeer), Windows::UI::Xaml::FrameworkElement const&);
            *value = detach_from<react::uwp::DynamicAutomationPeer>(this->shim().CreateInstance(*reinterpret_cast<Windows::UI::Xaml::FrameworkElement const*>(&owner)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, react::uwp::IDynamicAutomationProperties> : produce_base<D, react::uwp::IDynamicAutomationProperties>
{};

template <typename D>
struct produce<D, react::uwp::IDynamicAutomationPropertiesStatics> : produce_base<D, react::uwp::IDynamicAutomationPropertiesStatics>
{
    int32_t WINRT_CALL get_AccessibilityRoleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AccessibilityRoleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AccessibilityRoleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAccessibilityRole(void* element, react::uwp::AccessibilityRoles value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAccessibilityRole, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, react::uwp::AccessibilityRoles const&);
            this->shim().SetAccessibilityRole(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<react::uwp::AccessibilityRoles const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAccessibilityRole(void* element, react::uwp::AccessibilityRoles* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAccessibilityRole, WINRT_WRAP(react::uwp::AccessibilityRoles), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<react::uwp::AccessibilityRoles>(this->shim().GetAccessibilityRole(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AccessibilityStateDisabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AccessibilityStateDisabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AccessibilityStateDisabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAccessibilityStateDisabled(void* element, bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAccessibilityStateDisabled, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, bool);
            this->shim().SetAccessibilityStateDisabled(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAccessibilityStateDisabled(void* element, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAccessibilityStateDisabled, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<bool>(this->shim().GetAccessibilityStateDisabled(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AccessibilityStateSelectedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AccessibilityStateSelectedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AccessibilityStateSelectedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAccessibilityStateSelected(void* element, bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAccessibilityStateSelected, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, bool);
            this->shim().SetAccessibilityStateSelected(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAccessibilityStateSelected(void* element, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAccessibilityStateSelected, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<bool>(this->shim().GetAccessibilityStateSelected(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AccessibilityInvokeEventHandlerProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AccessibilityInvokeEventHandlerProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AccessibilityInvokeEventHandlerProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAccessibilityInvokeEventHandler(void* element, void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAccessibilityInvokeEventHandler, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, react::uwp::AccessibilityInvokeEventHandler const&);
            this->shim().SetAccessibilityInvokeEventHandler(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<react::uwp::AccessibilityInvokeEventHandler const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAccessibilityInvokeEventHandler(void* element, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAccessibilityInvokeEventHandler, WINRT_WRAP(react::uwp::AccessibilityInvokeEventHandler), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<react::uwp::AccessibilityInvokeEventHandler>(this->shim().GetAccessibilityInvokeEventHandler(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, react::uwp::IViewControl> : produce_base<D, react::uwp::IViewControl>
{
    int32_t WINRT_CALL GetPanel(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPanel, WINRT_WRAP(react::uwp::ViewPanel));
            *result = detach_from<react::uwp::ViewPanel>(this->shim().GetPanel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, react::uwp::IViewPanel> : produce_base<D, react::uwp::IViewPanel>
{
    int32_t WINRT_CALL InsertAt(uint32_t index, void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InsertAt, WINRT_WRAP(void), uint32_t, Windows::UI::Xaml::UIElement const&);
            this->shim().InsertAt(index, *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RemoveAt(uint32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RemoveAt, WINRT_WRAP(void), uint32_t);
            this->shim().RemoveAt(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Clear() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Clear, WINRT_WRAP(void));
            this->shim().Clear();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FinalizeProperties() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FinalizeProperties, WINRT_WRAP(void));
            this->shim().FinalizeProperties();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetOuterBorder(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetOuterBorder, WINRT_WRAP(Windows::UI::Xaml::Controls::Border));
            *result = detach_from<Windows::UI::Xaml::Controls::Border>(this->shim().GetOuterBorder());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ViewBackground(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewBackground, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().ViewBackground());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ViewBackground(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewBackground, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().ViewBackground(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThickness, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().BorderThickness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThickness, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().BorderThickness(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderBrush(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrush, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().BorderBrush());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderBrush(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrush, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().BorderBrush(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadius, WINRT_WRAP(Windows::UI::Xaml::CornerRadius));
            *value = detach_from<Windows::UI::Xaml::CornerRadius>(this->shim().CornerRadius());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadius, WINRT_WRAP(void), Windows::UI::Xaml::CornerRadius const&);
            this->shim().CornerRadius(*reinterpret_cast<Windows::UI::Xaml::CornerRadius const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClipChildren(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClipChildren, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClipChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClipChildren(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClipChildren, WINRT_WRAP(void), bool);
            this->shim().ClipChildren(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, react::uwp::IViewPanelStatics> : produce_base<D, react::uwp::IViewPanelStatics>
{
    int32_t WINRT_CALL get_ViewBackgroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewBackgroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ViewBackgroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderThicknessProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThicknessProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BorderThicknessProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderBrushProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrushProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BorderBrushProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CornerRadiusProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadiusProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CornerRadiusProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClipChildrenProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClipChildrenProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ClipChildrenProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetTop(void* element, double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetTop, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, double);
            this->shim().SetTop(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTop(void* element, double* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTop, WINRT_WRAP(double), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<double>(this->shim().GetTop(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LeftProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LeftProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetLeft(void* element, double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetLeft, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, double);
            this->shim().SetLeft(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetLeft(void* element, double* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetLeft, WINRT_WRAP(double), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<double>(this->shim().GetLeft(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::react::uwp {

inline DynamicAutomationPeer::DynamicAutomationPeer(Windows::UI::Xaml::FrameworkElement const& owner) :
    DynamicAutomationPeer(impl::call_factory<DynamicAutomationPeer, react::uwp::IDynamicAutomationPeerFactory>([&](auto&& f) { return f.CreateInstance(owner); }))
{}

inline Windows::UI::Xaml::DependencyProperty DynamicAutomationProperties::AccessibilityRoleProperty()
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.AccessibilityRoleProperty(); });
}

inline void DynamicAutomationProperties::SetAccessibilityRole(Windows::UI::Xaml::UIElement const& element, react::uwp::AccessibilityRoles const& value)
{
    impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.SetAccessibilityRole(element, value); });
}

inline react::uwp::AccessibilityRoles DynamicAutomationProperties::GetAccessibilityRole(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.GetAccessibilityRole(element); });
}

inline Windows::UI::Xaml::DependencyProperty DynamicAutomationProperties::AccessibilityStateDisabledProperty()
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.AccessibilityStateDisabledProperty(); });
}

inline void DynamicAutomationProperties::SetAccessibilityStateDisabled(Windows::UI::Xaml::UIElement const& element, bool value)
{
    impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.SetAccessibilityStateDisabled(element, value); });
}

inline bool DynamicAutomationProperties::GetAccessibilityStateDisabled(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.GetAccessibilityStateDisabled(element); });
}

inline Windows::UI::Xaml::DependencyProperty DynamicAutomationProperties::AccessibilityStateSelectedProperty()
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.AccessibilityStateSelectedProperty(); });
}

inline void DynamicAutomationProperties::SetAccessibilityStateSelected(Windows::UI::Xaml::UIElement const& element, bool value)
{
    impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.SetAccessibilityStateSelected(element, value); });
}

inline bool DynamicAutomationProperties::GetAccessibilityStateSelected(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.GetAccessibilityStateSelected(element); });
}

inline Windows::UI::Xaml::DependencyProperty DynamicAutomationProperties::AccessibilityInvokeEventHandlerProperty()
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.AccessibilityInvokeEventHandlerProperty(); });
}

inline void DynamicAutomationProperties::SetAccessibilityInvokeEventHandler(Windows::UI::Xaml::UIElement const& element, react::uwp::AccessibilityInvokeEventHandler const& value)
{
    impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.SetAccessibilityInvokeEventHandler(element, value); });
}

inline react::uwp::AccessibilityInvokeEventHandler DynamicAutomationProperties::GetAccessibilityInvokeEventHandler(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<DynamicAutomationProperties, react::uwp::IDynamicAutomationPropertiesStatics>([&](auto&& f) { return f.GetAccessibilityInvokeEventHandler(element); });
}

inline ViewControl::ViewControl() :
    ViewControl(impl::call_factory<ViewControl>([](auto&& f) { return f.template ActivateInstance<ViewControl>(); }))
{}

inline ViewPanel::ViewPanel() :
    ViewPanel(impl::call_factory<ViewPanel>([](auto&& f) { return f.template ActivateInstance<ViewPanel>(); }))
{}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::ViewBackgroundProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.ViewBackgroundProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::BorderThicknessProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.BorderThicknessProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::BorderBrushProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.BorderBrushProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::CornerRadiusProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.CornerRadiusProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::ClipChildrenProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.ClipChildrenProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::TopProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.TopProperty(); });
}

inline void ViewPanel::SetTop(Windows::UI::Xaml::UIElement const& element, double value)
{
    impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.SetTop(element, value); });
}

inline double ViewPanel::GetTop(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.GetTop(element); });
}

inline Windows::UI::Xaml::DependencyProperty ViewPanel::LeftProperty()
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.LeftProperty(); });
}

inline void ViewPanel::SetLeft(Windows::UI::Xaml::UIElement const& element, double value)
{
    impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.SetLeft(element, value); });
}

inline double ViewPanel::GetLeft(Windows::UI::Xaml::UIElement const& element)
{
    return impl::call_factory<ViewPanel, react::uwp::IViewPanelStatics>([&](auto&& f) { return f.GetLeft(element); });
}

template <typename L> AccessibilityInvokeEventHandler::AccessibilityInvokeEventHandler(L handler) :
    AccessibilityInvokeEventHandler(impl::make_delegate<AccessibilityInvokeEventHandler>(std::forward<L>(handler)))
{}

template <typename F> AccessibilityInvokeEventHandler::AccessibilityInvokeEventHandler(F* handler) :
    AccessibilityInvokeEventHandler([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> AccessibilityInvokeEventHandler::AccessibilityInvokeEventHandler(O* object, M method) :
    AccessibilityInvokeEventHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> AccessibilityInvokeEventHandler::AccessibilityInvokeEventHandler(com_ptr<O>&& object, M method) :
    AccessibilityInvokeEventHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> AccessibilityInvokeEventHandler::AccessibilityInvokeEventHandler(weak_ref<O>&& object, M method) :
    AccessibilityInvokeEventHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void AccessibilityInvokeEventHandler::operator()() const
{
    check_hresult((*(impl::abi_t<AccessibilityInvokeEventHandler>**)this)->Invoke());
}

}

namespace winrt::impl {

struct property_react_uwp_IDynamicAutomationPropertiesStatics
{ struct named {
    struct AccessibilityInvokeEventHandlerProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityInvokeEventHandlerProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IDynamicAutomationPropertiesStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.AccessibilityInvokeEventHandlerProperty();
            }
        };
    };
    struct AccessibilityRoleProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityRoleProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IDynamicAutomationPropertiesStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.AccessibilityRoleProperty();
            }
        };
    };
    struct AccessibilityStateDisabledProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityStateDisabledProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IDynamicAutomationPropertiesStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.AccessibilityStateDisabledProperty();
            }
        };
    };
    struct AccessibilityStateSelectedProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityStateSelectedProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IDynamicAutomationPropertiesStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.AccessibilityStateSelectedProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::AccessibilityInvokeEventHandlerProperty, named::AccessibilityRoleProperty, named::AccessibilityStateDisabledProperty, named::AccessibilityStateSelectedProperty>; };
};

struct property_react_uwp_IViewPanel
{ struct named {
    struct BorderBrush
    {
        struct name { static constexpr std::wstring_view value{ L"BorderBrush"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Brush;
        using target_type = winrt::react::uwp::IViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderBrush();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BorderBrush(std::forward<Value>(value));
            }
        };
    };
    struct BorderThickness
    {
        struct name { static constexpr std::wstring_view value{ L"BorderThickness"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Thickness;
        using target_type = winrt::react::uwp::IViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderThickness();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BorderThickness(std::forward<Value>(value));
            }
        };
    };
    struct ClipChildren
    {
        struct name { static constexpr std::wstring_view value{ L"ClipChildren"sv }; };
        using property_type = bool;
        using target_type = winrt::react::uwp::IViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ClipChildren();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ClipChildren(std::forward<Value>(value));
            }
        };
    };
    struct CornerRadius
    {
        struct name { static constexpr std::wstring_view value{ L"CornerRadius"sv }; };
        using property_type = winrt::Windows::UI::Xaml::CornerRadius;
        using target_type = winrt::react::uwp::IViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CornerRadius();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.CornerRadius(std::forward<Value>(value));
            }
        };
    };
    struct ViewBackground
    {
        struct name { static constexpr std::wstring_view value{ L"ViewBackground"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Brush;
        using target_type = winrt::react::uwp::IViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ViewBackground();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ViewBackground(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::BorderBrush, named::BorderThickness, named::ClipChildren, named::CornerRadius, named::ViewBackground>; };
};

struct property_react_uwp_IViewPanelStatics
{ struct named {
    struct BorderBrushProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BorderBrushProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderBrushProperty();
            }
        };
    };
    struct BorderThicknessProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BorderThicknessProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderThicknessProperty();
            }
        };
    };
    struct ClipChildrenProperty
    {
        struct name { static constexpr std::wstring_view value{ L"ClipChildrenProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ClipChildrenProperty();
            }
        };
    };
    struct CornerRadiusProperty
    {
        struct name { static constexpr std::wstring_view value{ L"CornerRadiusProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CornerRadiusProperty();
            }
        };
    };
    struct LeftProperty
    {
        struct name { static constexpr std::wstring_view value{ L"LeftProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.LeftProperty();
            }
        };
    };
    struct TopProperty
    {
        struct name { static constexpr std::wstring_view value{ L"TopProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.TopProperty();
            }
        };
    };
    struct ViewBackgroundProperty
    {
        struct name { static constexpr std::wstring_view value{ L"ViewBackgroundProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::IViewPanelStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ViewBackgroundProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::BorderBrushProperty, named::BorderThicknessProperty, named::ClipChildrenProperty, named::CornerRadiusProperty, named::LeftProperty, named::TopProperty, named::ViewBackgroundProperty>; };
};

struct property_react_uwp_DynamicAutomationPeer
{ struct named {
    struct IsSelected
    {
        struct name { static constexpr std::wstring_view value{ L"IsSelected"sv }; };
        using property_type = bool;
        using target_type = winrt::react::uwp::DynamicAutomationPeer;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsSelected();
            }
        };
    };
    struct SelectionContainer
    {
        struct name { static constexpr std::wstring_view value{ L"SelectionContainer"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple;
        using target_type = winrt::react::uwp::DynamicAutomationPeer;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SelectionContainer();
            }
        };
    };
    struct CanSelectMultiple
    {
        struct name { static constexpr std::wstring_view value{ L"CanSelectMultiple"sv }; };
        using property_type = bool;
        using target_type = winrt::react::uwp::DynamicAutomationPeer;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CanSelectMultiple();
            }
        };
    };
    struct IsSelectionRequired
    {
        struct name { static constexpr std::wstring_view value{ L"IsSelectionRequired"sv }; };
        using property_type = bool;
        using target_type = winrt::react::uwp::DynamicAutomationPeer;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsSelectionRequired();
            }
        };
    };};
    struct list { using type = impl::typelist<named::IsSelected, named::SelectionContainer, named::CanSelectMultiple, named::IsSelectionRequired>; };
};

struct property_react_uwp_DynamicAutomationProperties
{ struct named {
    struct AccessibilityInvokeEventHandlerProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityInvokeEventHandlerProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::DynamicAutomationProperties;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::AccessibilityInvokeEventHandlerProperty();
            }
        };
    };
    struct AccessibilityRoleProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityRoleProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::DynamicAutomationProperties;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::AccessibilityRoleProperty();
            }
        };
    };
    struct AccessibilityStateDisabledProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityStateDisabledProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::DynamicAutomationProperties;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::AccessibilityStateDisabledProperty();
            }
        };
    };
    struct AccessibilityStateSelectedProperty
    {
        struct name { static constexpr std::wstring_view value{ L"AccessibilityStateSelectedProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::DynamicAutomationProperties;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::AccessibilityStateSelectedProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::AccessibilityInvokeEventHandlerProperty, named::AccessibilityRoleProperty, named::AccessibilityStateDisabledProperty, named::AccessibilityStateSelectedProperty>; };
};

struct property_react_uwp_ViewPanel
{ struct named {
    struct ViewBackground
    {
        struct name { static constexpr std::wstring_view value{ L"ViewBackground"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Brush;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ViewBackground();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ViewBackground(std::forward<Value>(value));
            }
        };
    };
    struct CornerRadius
    {
        struct name { static constexpr std::wstring_view value{ L"CornerRadius"sv }; };
        using property_type = winrt::Windows::UI::Xaml::CornerRadius;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CornerRadius();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.CornerRadius(std::forward<Value>(value));
            }
        };
    };
    struct ClipChildren
    {
        struct name { static constexpr std::wstring_view value{ L"ClipChildren"sv }; };
        using property_type = bool;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ClipChildren();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ClipChildren(std::forward<Value>(value));
            }
        };
    };
    struct BorderThickness
    {
        struct name { static constexpr std::wstring_view value{ L"BorderThickness"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Thickness;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderThickness();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BorderThickness(std::forward<Value>(value));
            }
        };
    };
    struct BorderBrush
    {
        struct name { static constexpr std::wstring_view value{ L"BorderBrush"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Brush;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BorderBrush();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BorderBrush(std::forward<Value>(value));
            }
        };
    };
    struct BorderBrushProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BorderBrushProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::BorderBrushProperty();
            }
        };
    };
    struct BorderThicknessProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BorderThicknessProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::BorderThicknessProperty();
            }
        };
    };
    struct ClipChildrenProperty
    {
        struct name { static constexpr std::wstring_view value{ L"ClipChildrenProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::ClipChildrenProperty();
            }
        };
    };
    struct CornerRadiusProperty
    {
        struct name { static constexpr std::wstring_view value{ L"CornerRadiusProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::CornerRadiusProperty();
            }
        };
    };
    struct LeftProperty
    {
        struct name { static constexpr std::wstring_view value{ L"LeftProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::LeftProperty();
            }
        };
    };
    struct TopProperty
    {
        struct name { static constexpr std::wstring_view value{ L"TopProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::TopProperty();
            }
        };
    };
    struct ViewBackgroundProperty
    {
        struct name { static constexpr std::wstring_view value{ L"ViewBackgroundProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::react::uwp::ViewPanel;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::ViewBackgroundProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ViewBackground, named::CornerRadius, named::ClipChildren, named::BorderThickness, named::BorderBrush, named::BorderBrushProperty, named::BorderThicknessProperty, named::ClipChildrenProperty, named::CornerRadiusProperty, named::LeftProperty, named::TopProperty, named::ViewBackgroundProperty>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<react::uwp::IDynamicAutomationPropertiesStatics> : impl::property_react_uwp_IDynamicAutomationPropertiesStatics::named {};
template <> struct properties<react::uwp::IDynamicAutomationPropertiesStatics> : impl::property_react_uwp_IDynamicAutomationPropertiesStatics::list {};
template <> struct named_property<react::uwp::IViewPanel> : impl::property_react_uwp_IViewPanel::named {};
template <> struct properties<react::uwp::IViewPanel> : impl::property_react_uwp_IViewPanel::list {};
template <> struct named_property<react::uwp::IViewPanelStatics> : impl::property_react_uwp_IViewPanelStatics::named {};
template <> struct properties<react::uwp::IViewPanelStatics> : impl::property_react_uwp_IViewPanelStatics::list {};
template <> struct named_property<react::uwp::DynamicAutomationPeer> : impl::property_react_uwp_DynamicAutomationPeer::named {};
template <> struct properties<react::uwp::DynamicAutomationPeer> : impl::property_react_uwp_DynamicAutomationPeer::list {};
template <> struct named_property<react::uwp::DynamicAutomationProperties> : impl::property_react_uwp_DynamicAutomationProperties::named {};
template <> struct properties<react::uwp::DynamicAutomationProperties> : impl::property_react_uwp_DynamicAutomationProperties::list {};
template <> struct named_property<react::uwp::ViewPanel> : impl::property_react_uwp_ViewPanel::named {};
template <> struct properties<react::uwp::ViewPanel> : impl::property_react_uwp_ViewPanel::list {};

template <>
struct base_type<react::uwp::DynamicAutomationPeer> { using type = Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer; };
template <>
struct base_type<react::uwp::ViewControl> { using type = Windows::UI::Xaml::Controls::ContentControl; };
template <>
struct base_type<react::uwp::ViewPanel> { using type = Windows::UI::Xaml::Controls::Panel; };template <> struct get_enumerator_names<react::uwp::AccessibilityRoles>
{
    static constexpr std::array<std::wstring_view, 13> value{{ 
        {L"None", 4},
        {L"Button", 6},
        {L"Link", 4},
        {L"Search", 6},
        {L"Image", 5},
        {L"KeyboardKey", 11},
        {L"Text", 4},
        {L"Adjustable", 10},
        {L"ImageButton", 11},
        {L"Header", 6},
        {L"Summary", 7},
        {L"Unknown", 7},
        {L"CountRoles", 10}, }};
};
template <> struct get_enumerator_values<react::uwp::AccessibilityRoles>
{
    static constexpr std::array<react::uwp::AccessibilityRoles, 13> value{{ 
        react::uwp::AccessibilityRoles::None,
        react::uwp::AccessibilityRoles::Button,
        react::uwp::AccessibilityRoles::Link,
        react::uwp::AccessibilityRoles::Search,
        react::uwp::AccessibilityRoles::Image,
        react::uwp::AccessibilityRoles::KeyboardKey,
        react::uwp::AccessibilityRoles::Text,
        react::uwp::AccessibilityRoles::Adjustable,
        react::uwp::AccessibilityRoles::ImageButton,
        react::uwp::AccessibilityRoles::Header,
        react::uwp::AccessibilityRoles::Summary,
        react::uwp::AccessibilityRoles::Unknown,
        react::uwp::AccessibilityRoles::CountRoles, }};
};
template <> struct get_enumerator_names<react::uwp::AccessibilityStates>
{
    static constexpr std::array<std::wstring_view, 3> value{{ 
        {L"Selected", 8},
        {L"Disabled", 8},
        {L"CountStates", 11}, }};
};
template <> struct get_enumerator_values<react::uwp::AccessibilityStates>
{
    static constexpr std::array<react::uwp::AccessibilityStates, 3> value{{ 
        react::uwp::AccessibilityStates::Selected,
        react::uwp::AccessibilityStates::Disabled,
        react::uwp::AccessibilityStates::CountStates, }};
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::react::uwp::IDynamicAutomationPeer> : winrt::impl::hash_base<winrt::react::uwp::IDynamicAutomationPeer> {};
template<> struct hash<winrt::react::uwp::IDynamicAutomationPeerFactory> : winrt::impl::hash_base<winrt::react::uwp::IDynamicAutomationPeerFactory> {};
template<> struct hash<winrt::react::uwp::IDynamicAutomationProperties> : winrt::impl::hash_base<winrt::react::uwp::IDynamicAutomationProperties> {};
template<> struct hash<winrt::react::uwp::IDynamicAutomationPropertiesStatics> : winrt::impl::hash_base<winrt::react::uwp::IDynamicAutomationPropertiesStatics> {};
template<> struct hash<winrt::react::uwp::IViewControl> : winrt::impl::hash_base<winrt::react::uwp::IViewControl> {};
template<> struct hash<winrt::react::uwp::IViewPanel> : winrt::impl::hash_base<winrt::react::uwp::IViewPanel> {};
template<> struct hash<winrt::react::uwp::IViewPanelStatics> : winrt::impl::hash_base<winrt::react::uwp::IViewPanelStatics> {};
template<> struct hash<winrt::react::uwp::DynamicAutomationPeer> : winrt::impl::hash_base<winrt::react::uwp::DynamicAutomationPeer> {};
template<> struct hash<winrt::react::uwp::DynamicAutomationProperties> : winrt::impl::hash_base<winrt::react::uwp::DynamicAutomationProperties> {};
template<> struct hash<winrt::react::uwp::ViewControl> : winrt::impl::hash_base<winrt::react::uwp::ViewControl> {};
template<> struct hash<winrt::react::uwp::ViewPanel> : winrt::impl::hash_base<winrt::react::uwp::ViewPanel> {};

}
