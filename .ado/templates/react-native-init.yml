#
parameters:
  language:
  version:
  platform:
  configuration:
  vsComponents: ''
  vsInstallerUri: $(VsInstallerUri)

steps:
  - checkout: self # self represents the repo where the initial Pipelines YAML file was found
    clean: true # whether to fetch clean each time
    # fetchDepth: 2 # the depth of commits to ask Git to fetch
    lfs: false # whether to download Git-LFS files
    submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
    persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

  # First do a build of the local package, since we point the cli at the local files, it needs to be pre-built
  - task: CmdLine@2
    displayName: yarn install (local react-native-windows)
    inputs:
      script: yarn install --frozen-lockfile

  - task: CmdLine@2
    displayName: yarn build (local react-native-windows)
    inputs:
      script: yarn build
      workingDirectory: vnext

  # yarn ends up copying the whole node_modules folder when doing an install of a file package
  # Delete node_modules, so that resolution is more like when installing from a published npm package
  - task: CmdLine@2
    displayName: Remove node_modules
    inputs:
      script: rd /S /Q node_modules
      workingDirectory: vnext

  - task: CmdLine@2
    displayName: Install react-native cli
    inputs:
      script: npm install -g react-native-cli

  - task: CmdLine@2
    displayName: Init new project
    inputs:
      script: react-native init testcli --version ${{ parameters.version }}
      workingDirectory: $(Agent.BuildDirectory)

  - task: CmdLine@2
    displayName: Install rnpm-plugin-windows
    inputs:
      script: yarn add rnpm-plugin-windows@file:$(Build.SourcesDirectory)\current\local-cli\rnpm\windows
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - task: CmdLine@2
    displayName: Apply windows template
    inputs:
      script: react-native windows --template vnext --windowsVersion file:$(Build.SourcesDirectory)\vnext --overwrite --language ${{ parameters.language }}
      workingDirectory: $(Agent.BuildDirectory)\testcli

  - task: NuGetCommand@2
    displayName: NuGet restore testcli
    inputs:
      command: restore
      restoreSolution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln

  - template: install-SDK.yml
    parameters:
      sdkVersion: $(Win10Version)

  - task: PowerShell@2
    displayName: Install Visual Studio dependencies
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
      arguments:
        -InstallerUri ${{ parameters.vsInstallerUri }}
        -Components ${{ parameters.vsComponents }}
    condition: and(ne('${{parameters.vsComponents}}', ''), eq(variables['VmImage'], 'windows-2019'))

  - task: MSBuild@1
    displayName: MSBuild - testcli
    inputs:
      solution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln
      msbuildVersion: $(MSBuildVersion) # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
      msbuildArchitecture: $(MSBuildArchitecture) # Optional. Options: x86, x64
      platform: ${{ parameters.platform }} # Optional
      configuration: ${{ parameters.configuration }} # Optional
      createLogFile: true
      logFileVerbosity: detailed
      msbuildArguments:
        /p:PreferredToolArchitecture=$(MSBuildPreferredToolArchitecture)
        /p:PlatformToolset=$(MSBuildPlatformToolset)
        /p:BaseIntDir=$(BaseIntDir)

  - task: PublishBuildArtifacts@1
    condition:  succeededOrFailed()
    timeoutInMinutes: 10
    inputs:
      pathtoPublish: $(Agent.BuildDirectory)/testcli/windows/testcli.sln.log
      artifactName: Detailed Logs for testcli.sln ${{ parameters.platform }} ${{ parameters.configuration }}
      publishLocation: 'Container'

  - task: CmdLine@2
    displayName: Create bundle testcli
    inputs:
      script: react-native bundle --entry-file index.js platform windows --bundle-output test.bundle
      workingDirectory: $(Agent.BuildDirectory)\testcli
