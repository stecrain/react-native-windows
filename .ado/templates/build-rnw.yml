# Steps template for building any React Native Windows variant.

parameters:
  useRnFork: true
  debug: false

  # NuGet & MSBuild
  project:
  msbuildVersion: 16.0
  msBuildArchitecture: x64
  preferredToolArchitecture: x64
  platformToolset: v141
  targetPlatformVersion: 10.0.18362.0
  msbuildArguments: ''
  yarnBuildCmd: build

  # Visual Studio Installer
  vsInstallerUri: 'https://download.visualstudio.microsoft.com/download/pr/c4fef23e-cc45-4836-9544-70e213134bc8/1ee5717e9a1e05015756dff77eb27d554a79a6db91f2716d836df368381af9a1/vs_Enterprise.exe'
  vsComponents: ''

steps:
  - task: CmdLine@2
    displayName: Modify package.json to use unforked RN
    inputs:
      script: node scripts/useUnForkedRN.js
      workingDirectory: $(Build.SourcesDirectory)/vnext
    condition: and(succeeded(), not('${{parameters.useRnFork}}'))

  - task: CmdLine@2
    displayName: yarn install (Using microsoft/react-native)
    inputs:
      script: yarn install --frozen-lockfile
    condition: and(succeeded(), '${{parameters.useRnFork}}')

    # We can't use a frozen lockfile for both the fork and non-fork, since they install different dependencies
    # We don't want to force devs to update/create two lock files on every change, so just don't freeze when
    # using the non fork version.
  - task: CmdLine@2
    displayName: yarn install (Using facebook/react-native)
    inputs:
      script: yarn install
    condition: and(succeeded(), not('${{parameters.useRnFork}}'))

  - task: CmdLine@2
    displayName: yarn ${{ parameters.yarnBuildCmd }}
    inputs:
      script: yarn ${{ parameters.yarnBuildCmd }}

  - task: NuGetCommand@2
    displayName: NuGet restore
    inputs:
      command: restore
      restoreSolution: ${{parameters.project }}
      feedsToUse: config
      nugetConfigPath: $(Build.SourcesDirectory)/vnext/NuGet.config
      restoreDirectory: packages/
      verbosityRestore: Detailed # Options: quiet, normal, detailed

  - template: install-SDK.yml

  - task: PowerShell@2
    displayName: Install Visual Studio dependencies
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
      arguments:
        -InstallerUri ${{ parameters.vsInstallerUri }}
        -Components ${{ parameters.vsComponents }}
        -Collect:$${{ parameters.debug }}
    condition: and(ne('${{parameters.vsComponents}}', ''), eq(variables['VmImage'], 'windows-2019'))

  - task: MSBuild@1
    displayName: MSBuild ${{parameters.project}}
    inputs:
      solution: ${{parameters.project }}
      msbuildVersion: ${{parameters.msbuildVersion}}
      msbuildArchitecture: ${{parameters.msBuildArchitecture}}
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      createLogFile: true
      logFileVerbosity: detailed
      msbuildArguments:
        /p:PreferredToolArchitecture=${{parameters.preferredToolArchitecture}}
        /p:PlatformToolset=${{parameters.platformToolset}}
        ${{parameters.msbuildArguments}}

  - task: PublishBuildArtifacts@1
    condition:  succeededOrFailed()
    timeoutInMinutes: 10
    inputs:    
      pathtoPublish: $(Build.SourcesDirectory)/${{parameters.project}}.log 
      artifactName: Detailed Logs for ${{parameters.project}} $(BuildConfiguration) $(BuildPlatform)
      publishLocation: 'Container'

