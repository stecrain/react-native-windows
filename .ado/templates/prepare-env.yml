# Steps to checkout, install node_modules, yarn build, install SDK and install VS dependencies

parameters:
  useRnFork: true
  yarnBuildCmd: build
  debug: false

  # Visual Studio Installer
  vsInstallerUri: $(VsInstallerUri)
  vsComponents: ''

steps:
  - task: PowerShell@2
    displayName: Display env
    inputs:
      targetType: "inline"
      script:  gci env:* | sort-object name

  - task: PowerShell@2
    displayName: Display disksize
    inputs:
      targetType: inline # filePath | inline
      script: |
        Get-WmiObject Win32_LogicalDisk

  - task: UseNode@1
    inputs:
      version: '10.x'

  - task: CmdLine@2
    displayName: Modify package.json to use unforked RN
    inputs:
      script: node scripts/useUnForkedRN.js
      workingDirectory: $(Build.SourcesDirectory)/vnext
    condition: and(succeeded(), not('${{parameters.useRnFork}}'))

  - task: CmdLine@2
    displayName: yarn install (Using microsoft/react-native)
    inputs:
      script: yarn install --frozen-lockfile
    condition: and(succeeded(), '${{parameters.useRnFork}}')

    # We can't use a frozen lockfile for both the fork and non-fork, since they install different dependencies
    # We don't want to force devs to update/create two lock files on every change, so just don't freeze when
    # using the non fork version.
  - task: CmdLine@2
    displayName: yarn install (Using facebook/react-native)
    inputs:
      script: yarn install
    condition: and(succeeded(), not('${{parameters.useRnFork}}'))

  - task: CmdLine@2
    displayName: Install react-native-cli
    inputs:
      script: npm install -g react-native-cli
      
  - task: CmdLine@2
    displayName: yarn ${{ parameters.yarnBuildCmd }}
    inputs:
      script: yarn ${{ parameters.yarnBuildCmd }}

  - template: install-SDK.yml
    parameters:
      sdkVersion: $(Win10Version)

  - task: PowerShell@2
    displayName: Install Visual Studio dependencies
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/vnext/Scripts/Tfs/Install-VsFeatures.ps1
      arguments:
        -InstallerUri ${{ parameters.vsInstallerUri }}
        -Components ${{ parameters.vsComponents }}
        -Collect:$${{ parameters.debug }}
    condition: and(ne('${{parameters.vsComponents}}', ''), eq(variables['VmImage'], 'windows-2019'))

  - task: PowerShell@2
    displayName: List disksize after prepare-env
    inputs:
      targetType: inline # filePath | inline
      script: |
        Get-WmiObject Win32_LogicalDisk