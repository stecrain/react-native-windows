name: CI
on:
  pull_request:
    branches:
      - none # Disable GitHub Actions CI
jobs:
  # This job is much the same as UWPPR, but runs after replacing the version of react-native
  # we are using with facebook/react-native instead of microsoft/react-native
  UWPPublicRN:
    name: vnext with facebook/react-native
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 45
    steps:
      - name: Skip NO CI
        if: contains( github.event.head_commit.message, '***NO_CI***')
        run: exit 78

      - name: Checkout
        uses: actions/checkout@v1

      - name: Switch to facebook/react-native
        run: cd vnext && node scripts/useUnForkedRN.js

        # We can't use a frozen lockfile for both the fork and non-fork, since they install different dependencies
        # We don't want to force devs to update/create two lock files on every change, so just don't freeze when
        # using the non fork version.
      - run: yarn install

      - run: yarn buildci

      - name: Install SDK
        run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: NuGet restore ReactWindows-UWP.sln
        run: nuget.exe restore vnext\ReactWindows-UWP.sln -PackagesDirectory vnext/packages/ -Verbosity Detailed -NonInteractive

      - name: Build ReactWindows-UWP.sln
        run: msbuild vnext\ReactWindows-UWP.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="x86" /p:configuration="Debug"

      - name: NuGet restore Playground.sln
        run: nuget.exe restore packages/playground/windows/Playground.sln -Verbosity Detailed -NonInteractive

      - name: Build Playground.sln
        run: msbuild packages/playground/windows/Playground.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="x86" /p:configuration="Debug" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal

      # todo work out how to specify working-directory for run command
      - name: Create Playground bundle
        run: cd packages\playground && node node_modules/react-native/local-cli/cli.js bundle --entry-file Samples\index.tsx --bundle-output Playground.bundle

      # todo Switch to VS2019 so we can build this
      # - name: NuGet restore SampleApps.sln
      #  run: nuget.exe restore packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln -Verbosity Detailed -NonInteractive

      #- name: Build SampleApps.sln
      #  run: msbuild packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="x86" /p:configuration="Debug" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal

      # todo work out how to specify working-directory for run command
      - name: Create SampleApp bundle
        run: cd packages\microsoft-reactnative-sampleapps && node node_modules/react-native/local-cli/cli.js bundle --entry-file index.windows.js --bundle-output SampleApp.bundle

  # This job verifies the basic UWP projects
  UWPPR:
    name: vnext ReactWindows-UWP.sln
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 45
    # Can't appear to enable matrix right now:
    # https://github.community/t5/How-to-use-Git-and-GitHub/GitHub-Actions-Matrix-options-dont-work-as-documented/m-p/29558
    # Ideally we'd share more of the build def between UWPPublicRN and this job, but due to the issues with matrix right now
    # it was easier to just duplicate the job logic somewhat
    strategy:
      matrix:
        BuildConfiguration: [Debug, Release]
        BuildPlatform: [x64, x86, arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: yarn install
        run: yarn install --frozen-lockfile

      - run: yarn buildci

      - name: Install SDK
        run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: NuGet restore ReactWindows-UWP.sln
        run: nuget.exe restore vnext\ReactWindows-UWP.sln -PackagesDirectory vnext/packages/ -Verbosity Detailed -NonInteractive

      - name: Build ReactWindows-UWP.sln
        run: msbuild vnext\ReactWindows-UWP.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%"
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      - name: NuGet restore Playground.sln
        run: nuget.exe restore packages/playground/windows/Playground.sln -Verbosity Detailed -NonInteractive

      - name: Build Playground.sln
        run: msbuild packages/playground/windows/Playground.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%"
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      # todo work out how to specify working-directory for run command
      - name: Create Playground bundle
        run: cd packages\playground && node node_modules/react-native/local-cli/cli.js bundle --entry-file Samples\index.tsx --bundle-output Playground.bundle

      # todo Switch to VS2019 so we can build this
      #- name: NuGet restore SampleApps.sln
      #  run: nuget.exe restore packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln -Verbosity Detailed -NonInteractive

      #- name: Build SampleApps.sln
      #  run: msbuild packages/microsoft-reactnative-sampleapps/windows/SampleApps.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%"
      #  env:
      #    BUILDPLATFORM: ${{ matrix.BuildPlatform }}
      #    BUILDCONFIGURATION: ${{ matrix.BuildConfiguration }}

      # todo work out how to specify working-directory for run command
      - name: Create SampleApp bundle
        run: cd packages\microsoft-reactnative-sampleapps && node node_modules/react-native/local-cli/cli.js bundle --entry-file index.windows.js --bundle-output SampleApp.bundle

      # todo work out how to specify working-directory for run command
      - name: Create RNTester bundle
        #  if: ${{ matrix.UseRNFork }} == 'true'
        run: cd vnext && node ../node_modules/react-native/local-cli/cli.js bundle --entry-file .\RNTester.js --bundle-output RNTester.windows.bundle --platform windows

  # This job verifies creating a new react-native app, installing react-native-windows, applying the vnext template, and building it
  CliInit:
    name: Verify react-native init
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: yarn install
        run: yarn install --frozen-lockfile

      # todo work out how to specify working-directory for run command
      - name: yarn build (local react-native-windows)
        run: cd vnext && yarn build

      # yarn ends up copying the whole node_modules folder when doing an install of a file package
      # Delete node_modules, so that resolution is more like when installing from a published npm package
      - name: Remove node_modules
        run: cd vnext && rd /S /Q node_modules

      - name: Install react-native cli
        run: npm install -g react-native-cli

      - name: Init new project
        run: cd ${{ runner.temp }} && react-native init testcli --version 0.59.10

      - name: Install rnpm-plugin-windows
        run: cd ${{ runner.temp }}\testcli && yarn add rnpm-plugin-windows@file:${{ runner.workspace }}\react-native-windows\current\local-cli\rnpm\windows

      - name: Apply windows template
        run: cd ${{ runner.temp }}\testcli && react-native windows --template vnext --windowsVersion file:${{ runner.workspace }}\react-native-windows\vnext

      - name: Install SDK
        run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: NuGet restore testcli.sln
        run: nuget restore ${{ runner.temp }}\testcli\windows\testcli.sln

      - name: Build testcli.sln
        run: msbuild ${{ runner.temp }}\testcli\windows\testcli.sln /nologo /nr:false /p:PreferredToolArchitecture=x86 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal
        env:
          BUILDPLATFORM: x64
          BUILDCONFIGURATION: Debug

      - name: Create bundle testcli.sln
        run: cd ${{ runner.temp }}\testcli && react-native bundle --entry-file index.windows.js platform uwp --bundle-output test.bundle

  RNWFormatting:
    name: Verify change files + formatting
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: yarn install
        run: yarn install --frozen-lockfile

      - name: Check for change files
        run: node ./node_modules/beachball/bin/beachball.js check --changehint "Run `yarn change` from root of repo to generate a change file."

      - run: yarn format:verify

  CurrentPR:
    name: Current (C#) PR
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 10
    strategy:
      matrix:
        #TODO add DebugBundle
        BuildPlatform: [x64, x86, ARM]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Download/Extract Winium
        run: |
          curl -o ${{ runner.temp }}\winium.zip https://github.com/2gis/Winium.Desktop/releases/download/v1.6.0/Winium.Desktop.Driver.zip
          mkdir ${{ runner.temp }}\winium
          Add-Type -A 'System.IO.Compression.FileSystem'
          [IO.Compression.ZipFile]::ExtractToDirectory("${{ runner.temp }}\winium.zip", "${{ runner.temp }}\winium")
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore ReactNative.sln
        run: nuget.exe restore current/ReactWindows/ReactNative.sln -Verbosity Detailed -NonInteractive

      - name: Install react-native-cli
        run: npm install -g react-native-cli

      - name: npm install
        run: cd current && npm install

      - name: Make Bundle Dir
        run: mkdir current\ReactWindows\Playground.Net46\ReactAssets

      - name: Make Bundle
        run: cd current && react-native bundle --platform windows --entry-file ./ReactWindows/Playground.Net46/index.windows.js --bundle-output ./ReactWindows/Playground.Net46/ReactAssets/index.windows.bundle --assets-dest ./ReactWindows/Playground.Net46/ReactAssets --dev false

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactNative.sln
        run: msbuild current/ReactWindows/ReactNative.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="%BUILDPLATFORM%" /p:configuration="%BUILDCONFIGURATION%" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}
          BUILDCONFIGURATION: Debug

      - name: Start Winium
        run: |
          $winium = Start-Process -PassThru ${{ runner.temp }}\winium\Winium.Desktop.Driver.exe
          Start-Sleep -s 5
        shell: powershell

      - name: UTs
        if: matrix.BuildPlatform != 'ARM'
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" current/ReactWindows/ReactNative.Net46.Tests/bin/${{ matrix.BuildPlatform }}/Debug/ReactNative.Net46.Tests.dll
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}

      # Previous AppVeyor definition had code to trigger this, but due to a bug in the AppVeyor build def it was never triggering
      # It currently fails, so commenting this out for now
      #- task: CmdLine@2
      #  displayName: npm test
      #  inputs:
      #    script: npm test
      #    workingDirectory: current
      #  condition: and(succeeded(), or(eq(variables['BuildConfiguration'], 'DebugBundle'), eq(variables['BuildConfiguration'], 'ReleaseBundle')))

  RnwNativePRBuild:
    name: vnext Windows.sln
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    timeout-minutes: 45
    strategy:
      matrix:
        BuildConfiguration: [Debug, Release]
        BuildPlatform: [x64, x86, arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: yarn install
        run: yarn install --frozen-lockfile

      - run: yarn build

      - name: Install SDK
        run: .\vnext\Scripts\Install-WindowsSdkISO.ps1 18362
        shell: powershell

      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - name: NuGet restore ReactWindows.sln
        run: nuget.exe restore vnext\ReactWindows.sln -PackagesDirectory vnext/packages/ -Verbosity Detailed -NonInteractive

      - name: Setup MSBuild.exe
        uses: warrenbuckley/Setup-MSBuild@v1

      - name: Build ReactWindows.sln
        run: msbuild vnext\ReactWindows.sln /nologo /nr:false /p:PreferredToolArchitecture=x64 /p:platform="${{ matrix.BuildPlatform }}" /p:configuration="${{ matrix.BuildConfiguration}}" /clp:NoSummary;NoItemAndPropertyList;Verbosity=normal
        env:
          RNW_PKG_VERSION_STR: Private Build
          RNW_PKG_VERSION: 1000,0,0,0

      - name: Run Desktop Unit Tests
        if: matrix.BuildPlatform != 'arm'
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration}}/React.Windows.Desktop.UnitTests\React.Windows.Desktop.UnitTests.dll --InIsolation
        env:
          BUILDPLATFORM: ${{ matrix.BuildPlatform }}

      - name: Run Desktop Unit Tests (Google Test)
        if: matrix.BuildPlatform == 'x64'
        run: |
          "c:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe" vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration}}/JSI.Desktop.UnitTests/JSI.Desktop.UnitTests.exe /TestAdapterPath:"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\drknwe51.xnq" --InIsolation

      - name: "Copy Nuget source files"
        if: matrix.BuildConfiguration == 'Debug' && matrix.BuildPlatform == 'x86'
        run: vnext\layoutFilesForNuget.bat ${{ runner.temp }}\artifacts

      - uses: actions/upload-artifact@master
        if: matrix.BuildConfiguration == 'Debug'
        name: Publish Artifacts (Debug)
        with:
          name: ReactWindows-debug-${{ matrix.BuildPlatform }}
          path: vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration }}

      - uses: actions/upload-artifact@master
        if: matrix.BuildConfiguration == 'Release'
        name: Publish Artifacts (Release)
        with:
          name: ReactWindows-ship-${{ matrix.BuildPlatform }}
          path: vnext/target/${{ matrix.BuildPlatform }}/${{ matrix.BuildConfiguration }}

      - uses: actions/upload-artifact@master
        name: Publish Artifacts - Nuget Source files
        if: matrix.BuildConfiguration == 'Debug' && matrix.BuildPlatform == 'x86'
        with:
          name: ReactWindows-source
          path: ${{ runner.temp }}\artifacts

  RNWNugetPR:
    name: React-Native-Windows Build and Pack Nuget
    # todo switch to windows-2019 (to get VS 2019, but will need to remove dependency on v141 tools)
    runs-on: windows-2016
    needs: RnwNativePRBuild
    timeout-minutes: 15
    steps:
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-debug-arm
          path: ${{ runner.temp }}\artifacts\ReactWindows-debug-arm

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-ship-arm
          path: ${{ runner.temp }}\artifacts\ReactWindows-ship-arm

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-debug-x86
          path: ${{ runner.temp }}\artifacts\ReactWindows-debug-x86

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-ship-x86
          path: ${{ runner.temp }}\artifacts\ReactWindows-ship-x86

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-debug-x64
          path: ${{ runner.temp }}\artifacts\ReactWindows-debug-x64

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-ship-x64
          path: ${{ runner.temp }}\artifacts\ReactWindows-ship-x64

      - uses: actions/download-artifact@master
        with:
          name: ReactWindows-source
          path: ${{ runner.temp }}\artifacts\ReactWindows-source

      - name: Copy files from build artifacts to nuget root
        run: |
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-source ${{ runner.temp }}\NugetRoot /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-debug-x64 ${{ runner.temp }}\NugetRoot\target\x64\Debug /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-debug-x86 ${{ runner.temp }}\NugetRoot\target\x86\Debug /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-ship-x64 ${{ runner.temp }}\NugetRoot\target\x64\ship /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-ship-x86 ${{ runner.temp }}\NugetRoot\target\x86\ship /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-debug-arm ${{ runner.temp }}\NugetRoot\target\arm\debug /E /MOVE /NP
          robocopy ${{ runner.temp }}\artifacts\ReactWindows-ship-arm ${{ runner.temp }}\NugetRoot\target\arm\ship /E /MOVE /NP
          echo This makes errorlevel 0
          dir c:\

      - name: NuGet Pack ReactUwp
        run: nuget pack ${{ runner.temp }}\NugetRoot\ReactUwp.nuspec -OutputDirectory ${{ runner.temp }}\NugetRootFinal -Properties CommitId=0;npmVersion=0.0.1-pr

      - name: NuGet Pack ReactWin32
        run: nuget pack ${{ runner.temp }}\NugetRoot\ReactWin32.nuspec -OutputDirectory ${{ runner.temp }}\NugetRootFinal -Properties CommitId=0;npmVersion=0.0.1-pr
